@{ 
    var claimsIdentity = User.Identity as System.Security.Claims.ClaimsIdentity;
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="Social media, networking, and publishing where users earn Bitcoin over the Lightning Network.">
    <meta name="keywords" content="Bitcoin, Lightning Network, Social Media, Cryptocurrency, Lightning">
    <title>@ViewBag.Title</title>
    <link href='http://fonts.googleapis.com/css?family=Open+Sans:400,300,600,700' rel='stylesheet' type='text/css'>
    <link href="@Url.Content("~/node_modules/jquery-ui-dist/jquery-ui.min.css")" rel="stylesheet" type="text/css" />
    @RenderSection("Styles", required: false)
    @Styles.Render("~/Content/bootstrap")
    @Styles.Render("~/Content/bootstrap-tour")
    @Styles.Render("~/Content/font-awesome/css")
    @Styles.Render("~/Content/style/textspinners")
    @Styles.Render("~/plugins/summernoteStyles")
    @Styles.Render("~/Content/style/jssocials")
    @Styles.Render("~/Content/style/toastr")
    @if (claimsIdentity.Claims.Select(c => c.Type).Contains("ColorTheme") && claimsIdentity.FindFirst("ColorTheme").Value == "dark")
    {
        @Styles.Render("~/Content/css-dark")
    }
    else
    {
        @Styles.Render("~/Content/css")
    }
    <script type="text/javascript">
        var appInsights = window.appInsights || function (a) {
            function b(a) { c[a] = function () { var b = arguments; c.queue.push(function () { c[a].apply(c, b) }) } } var c = { config: a }, d = document, e = window; setTimeout(function () { var b = d.createElement("script"); b.src = a.url || "https://az416426.vo.msecnd.net/scripts/a/ai.0.js", d.getElementsByTagName("script")[0].parentNode.appendChild(b) }); try { c.cookie = d.cookie } catch (a) { } c.queue = []; for (var f = ["Event", "Exception", "Metric", "PageView", "Trace", "Dependency"]; f.length;)b("track" + f.pop()); if (b("setAuthenticatedUserContext"), b("clearAuthenticatedUserContext"), b("startTrackEvent"), b("stopTrackEvent"), b("startTrackPage"), b("stopTrackPage"), b("flush"), !a.disableExceptionTracking) { f = "onerror", b("_" + f); var g = e[f]; e[f] = function (a, b, d, e, h) { var i = g && g(a, b, d, e, h); return !0 !== i && c["_" + f](a, b, d, e, h), i } } return c
        }({
            instrumentationKey: "ee8f21e2-3d87-40b4-9055-f61ead610053"
        });

        window.appInsights = appInsights, appInsights.queue && 0 === appInsights.queue.length && appInsights.trackPageView();
    </script>
</head>
<body class="top-navigation gray-bg">
    @Html.Partial(partialViewName: "_PartialModalLNTransaction")      @*This is the code for the modal dialog box to deposit*@
    <div id="wrapper" class="@Html.PageClass()">
        <div id="page-wrapper" class="gray-bg @ViewBag.SpecialClass">
            @Html.Partial("_TopNavbar")
            @if (User.IsInRole("Administrator"))
            {
                Html.RenderAction("SiteAdminBar", controllerName: "Admin", routeValues: new { viewInfo = ViewBag.ViewInfo });
            }
            @RenderBody()
            <!-- Footer -->
            @Html.Partial("_Footer")
        </div>
        <!-- End page wrapper-->
    </div>
    <!-- End wrapper-->
    <!-- Section for main scripts render -->
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    @Scripts.Render("~/bundles/plugins")
    <!-- Handler for local scripts -->
    @RenderSection("scripts", required: false)
    @Html.RenderPartialViewScripts()
    <script src="~/Scripts/jquery.signalR-2.4.0.min.js"></script>
    <script src="~/signalr/hubs"></script>
    @Scripts.Render("~/bundles/DetailPost")
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/webrtc-adapter/6.4.0/adapter.min.js"></script>
    <script type="text/javascript" src="~/Scripts/instascan.min.js"></script>
    @Scripts.Render("~/bundles/users")

    <script type="text/javascript">
        var toggleChat;

        $(document).ready(function () {
            // Only if logged in
            @if (Request.IsAuthenticated)
            {
                <text>
                var urla = $("#unreadAlerts").data("url");
                $("#unreadAlerts").load(urla);

                var urlm = $("#unreadMessages").data("url");
                $("#unreadMessages").load(urlm);
                </text>
            }

            @if (Request.IsAuthenticated)
            {
                <text>
                $.get("/Account/GetBalance", function(data, status) {
                    $(".userBalanceValue").each(function (i, e) {
                        $(e).html(data.balance);
                    });
                });
                // Textarea autoexpand
                jQuery.each(jQuery('textarea[data-autoresize]'), function () {
                    var offset = this.offsetHeight - this.clientHeight;
                    var resizeTextarea = function (el) {
                        jQuery(el).css('height', 'auto').css('height', el.scrollHeight + offset);
                    };
                    jQuery(this).on('keyup input', function () { resizeTextarea(this); }).removeAttr('data-autoresize');
                });
                </text>
            }
        }); //end ready

    </script>
    @Scripts.Render("~/bundles/shared")
</body>
</html>
