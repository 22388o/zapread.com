@{ 
    var claimsIdentity = User.Identity as System.Security.Claims.ClaimsIdentity;
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="Social media, networking, and publishing where users earn Bitcoin over the Lightning Network.">
    <meta name="keywords" content="Bitcoin, Lightning Network, Social Media, Cryptocurrency, Lightning">
    <title>@ViewBag.Title</title>
    <link href='http://fonts.googleapis.com/css?family=Open+Sans:400,300,600,700' rel='stylesheet' type='text/css'>
    <link href="@Url.Content("~/node_modules/jquery-ui-dist/jquery-ui.min.css")" rel="stylesheet" type="text/css" />
    @RenderSection("Styles", required: false)
    @Styles.Render("~/Content/bootstrap")
    @Styles.Render("~/Content/bootstrap-tour")
    @Styles.Render("~/Content/font-awesome/css")
    @Styles.Render("~/Content/style/textspinners")
    @Styles.Render("~/plugins/summernoteStyles")
    @Styles.Render("~/Content/style/jssocials")
    @Styles.Render("~/Content/style/toastr")
    @if (claimsIdentity.Claims.Select(c => c.Type).Contains("ColorTheme") && claimsIdentity.FindFirst("ColorTheme").Value == "dark")
    {
        @Styles.Render("~/Content/css-dark")
    }
    else
    {
        @Styles.Render("~/Content/css")
    }
    <script type="text/javascript">
        var appInsights = window.appInsights || function (a) {
            function b(a) { c[a] = function () { var b = arguments; c.queue.push(function () { c[a].apply(c, b) }) } } var c = { config: a }, d = document, e = window; setTimeout(function () { var b = d.createElement("script"); b.src = a.url || "https://az416426.vo.msecnd.net/scripts/a/ai.0.js", d.getElementsByTagName("script")[0].parentNode.appendChild(b) }); try { c.cookie = d.cookie } catch (a) { } c.queue = []; for (var f = ["Event", "Exception", "Metric", "PageView", "Trace", "Dependency"]; f.length;)b("track" + f.pop()); if (b("setAuthenticatedUserContext"), b("clearAuthenticatedUserContext"), b("startTrackEvent"), b("stopTrackEvent"), b("startTrackPage"), b("stopTrackPage"), b("flush"), !a.disableExceptionTracking) { f = "onerror", b("_" + f); var g = e[f]; e[f] = function (a, b, d, e, h) { var i = g && g(a, b, d, e, h); return !0 !== i && c["_" + f](a, b, d, e, h), i } } return c
        }({
            instrumentationKey: "ee8f21e2-3d87-40b4-9055-f61ead610053"
        });

        window.appInsights = appInsights, appInsights.queue && 0 === appInsights.queue.length && appInsights.trackPageView();
    </script>
</head>
<body class="top-navigation gray-bg">
    @Html.Partial(partialViewName: "_PartialModalLNTransaction")      @*This is the code for the modal dialog box to deposit*@
    <div id="wrapper" class="@Html.PageClass()">
        <div id="page-wrapper" class="gray-bg @ViewBag.SpecialClass">
            @Html.Partial("_TopNavbar")
            @if (User.IsInRole("Administrator"))
            {
                Html.RenderAction("SiteAdminBar", controllerName: "Admin", routeValues: new { viewInfo = ViewBag.ViewInfo });
            }
            @RenderBody()
            <!-- Footer -->
            @Html.Partial("_Footer")
        </div>
        <!-- End page wrapper-->
    </div>
    <!-- End wrapper-->
    <!-- Section for main scripts render -->
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    @Scripts.Render("~/bundles/plugins")
    <!-- Handler for local scripts -->
    @RenderSection("scripts", required: false)
    @Html.RenderPartialViewScripts()
    <script src="~/Scripts/jquery.signalR-2.4.0.min.js"></script>
    <script src="~/signalr/hubs"></script>
    @Scripts.Render("~/bundles/DetailPost")
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/webrtc-adapter/6.4.0/adapter.min.js"></script>
    <script type="text/javascript" src="~/Scripts/instascan.min.js"></script>

    <script type="text/javascript">
        var toggleChat;
        $(document).ready(function () {
            // popups for users, groups, etc.
            $(".pop").popover({
                trigger: "manual",
                html: true,
                animation: false
            })
            .on("mouseenter", function () {
                var _this = this;
                $(this).popover("show");
                $('[data-toggle="tooltip"]').tooltip()
                $(".popover").addClass("tooltip-hover");
                $(".popover").on("mouseleave", function () {
                    $(_this).popover('hide');
                });
            })
            .on("mouseleave", function () {
                var _this = this;
                setTimeout(function () {
                    if (!$(".popover:hover").length) {
                        $(_this).popover("hide");
                    }
                }, 300);
            });
            $(".pop").each(function () {
                $(this).removeClass("pop");
            });

            toastr.options.closeMethod = 'fadeOut';
            toastr.options.closeDuration = 700;
            toastr.options.positionClass = 'toast-bottom-right';
            toastr.options.closeEasing = 'swing';
            toastr.options.closeButton = true;
            toastr.options.hideMethod = 'slideUp';
            toastr.options.progressBar = true;
            toastr.options.timeOut = 30000; // How long the toast will display without user interaction
            toastr.options.extendedTimeOut = 60000; // How long the toast will display after a user hovers over it

            $('[data-toggle="tooltip"]').tooltip()

            $("ul.dropdown-menu").on("click", "[data-keepOpenOnClick]", function (e) {
                e.stopPropagation();
            });

            $(".sharing").each(function () {
                $(this).jsSocials({
                    url: $(this).data('url'),
                    text: $(this).data('sharetext'),
                    showLabel: false,
                    showCount: false,
                    shareIn: "popup",
                    shares: ["email", "twitter", "facebook", "linkedin", "pinterest", "whatsapp"]
                });
                $(this).removeClass("sharing");
            });

            // Only if logged in
            @if (Request.IsAuthenticated)
            {
                <text>
                var urla = $("#unreadAlerts").data("url");
                $("#unreadAlerts").load(urla);

                var urlm = $("#unreadMessages").data("url");
                $("#unreadMessages").load(urlm);
                </text>
            }


            @if (Request.IsAuthenticated)
            {
                <text>
                $.get("/Account/GetBalance", function(data, status) {
                    $(".userBalanceValue").each(function (i, e) {
                        $(e).html(data.balance);
                    });
                });
                // Textarea autoexpand
                jQuery.each(jQuery('textarea[data-autoresize]'), function () {
                    var offset = this.offsetHeight - this.clientHeight;
                    var resizeTextarea = function (el) {
                        jQuery(el).css('height', 'auto').css('height', el.scrollHeight + offset);
                    };
                    jQuery(this).on('keyup input', function () { resizeTextarea(this); }).removeAttr('data-autoresize');
                });
                </text>
            }

            // This loads all async partial views on page
            $(".partialContents").each(function (index, item) {
                var url = $(item).data("url");
                if (url && url.length > 0) {
                    $(item).load(url);
                }
            });

            // show the read more
            $(".post-box").each(function (index, item) {
                if ($(item).height() >= 800) {
                    $(item).find(".read-more-button").show();
                }
            });

            // Make post quotable
            $(".post-quotable").each(function (ix, e) {
                // Trigger when mouse is released (i.e. possible selection made)
                $(e).mouseup(function () {
                    var selection = getSelected();
                    $(selectionMarker).popover('hide');
                    if (selection && selection != "") {
                        // User made a selection
                        var markerId = "sel_" + new Date().getTime() + "_" + Math.random().toString().substr(2);
                        selectionMarker = markSelection(markerId);
                        selectionText = selection.toString();
                        var postId = $(e).data('postid');
                        var popText = selectionText + '<hr/>' +
                            '<button class="btn btn-sm btn-link" onclick="postQuoteComment(' + postId + ');"><i class="fa fa-reply"></i> Reply</button>' +
                            '<button class="btn btn-sm btn-link" onclick="postQuoteComment(' + postId + ',true);">' +
                                '<i class="fa fa-reply"></i><i class="fa fa-bell"></i> Mention</button>';
                        $(selectionMarker).popover({
                            trigger: "hover",
                            html: true,
                            animation: false,
                            title: "Quote",
                            placement: "top",
                            content: popText
                        })
                        .on('hidden.bs.popover', function () {
                            $(selectionMarker).popover('dispose');
                        })
                        .popover("show");
                    }
                });
                $(e).removeClass("post-quotable");
            });

            // Make comments quotable
            $(".comment-quotable").each(function (ix, e) {
                // Trigger when mouse is released (i.e. possible selection made)
                $(e).mouseup(function () {
                    var selection = getSelected();
                    $(selectionMarker).popover('hide');
                    if (selection && selection != "") {
                        // User made a selection
                        var markerId = "sel_" + new Date().getTime() + "_" + Math.random().toString().substr(2);
                        selectionMarker = markSelection(markerId);
                        selectionText = selection.toString();
                        var commentid = $(e).data('commentid');
                        var popText = selectionText + '<hr/>' +
                            '<button class="btn btn-sm btn-link" onclick="commentQuoteComment(' + commentid + ');"><i class="fa fa-reply"></i> Reply</button>' +
                            '<button class="btn btn-sm btn-link" onclick="commentQuoteComment(' + commentid + ',true);">' +
                            '<i class="fa fa-reply"></i><i class="fa fa-bell"></i> Mention</button>';
                        $(selectionMarker).popover({
                            trigger: "hover",
                            html: true,
                            animation: false,
                            title: "Quote",
                            placement: "top",
                            content: popText
                        })
                            .on('hidden.bs.popover', function () {
                                $(selectionMarker).popover('dispose');
                            })
                            .popover("show");
                    }
                });
                $(e).removeClass("post-quotable");
            });

            $.fn.extend({
                placeCursorAtEnd: function () {
                    // Places the cursor at the end of a contenteditable container (should also work for textarea / input)
                    if (this.length === 0) {
                        throw new Error("Cannot manipulate an element if there is no element!");
                    }
                    var el = this[0];
                    var range = document.createRange();
                    var sel = window.getSelection();
                    var childLength = el.childNodes.length;
                    if (childLength > 0) {
                        var lastNode = el.childNodes[childLength - 1];
                        var lastNodeChildren = lastNode.childNodes.length;
                        range.setStart(lastNode, lastNodeChildren);
                        range.collapse(true);
                        sel.removeAllRanges();
                        sel.addRange(range);
                    }
                    return this;
                }
            });
            $(".impression").each(function (ix, e) {
                $(e).load($(e).data("url"));
                $(e).removeClass("impression");
            });
        }); //end ready
        
        var toggleChat = function (id, show) {
            show = typeof show !== 'undefined' ? show : false;
            $(".c_input_" + id.toString()).summernote({
                callbacks: {
                    onImageUpload: function (files) {
                        that = $(this);
                        sendFile(files[0], that);
                    }
                },
                focus: false,
                placeholder: 'Write comment...',
                disableDragAndDrop: false,
                toolbar: [['style', ['style']], ['para', ['ul', 'ol', 'paragraph']], 'bold', 'italic', 'underline', 'strikethrough', 'fontsize', 'color', 'link'],//false,
                minHeight: 60,
                maxHeight: 300,
                hint: {
                    match: /\B@@(\w*)$/,
                    search: function (keyword, callback) {
                        if (!keyword.length) return callback();
                        var msg = JSON.stringify({ 'searchstr': keyword.toString() });
                        $.ajax({
                            async: true,
                            url: '/Comment/GetMentions',
                            type: 'POST',
                            contentType: "application/json; charset=utf-8",
                            dataType: 'json',
                            data: msg,
                            error: function () {
                                callback();
                            },
                            success: function (res) {
                                callback(res.users);
                            }
                        });
                    },
                    content: function (item) {
                        return $("<span class='badge badge-info userhint'>").html('@@' + item)[0];
                    }
                }
            });

            //$('.c_input_' + id.toString()).each(function (i, e) {
            //    $(e).removeClass("c_input_" + id.toString());
            //});
            $(".note-statusbar").css("display", "none");
            if (!show) {
                $('#comments_' + id.toString()).slideToggle(200);
                $('#preply_' + id.toString()).slideToggle(200);
            }
            else {
                $('#comments_' + id.toString()).slideDown(200);
                $('#preply_' + id.toString()).slideDown(200);
            }
        };

        var replyComment = function (id) {
            $('#c_reply_' + id.toString()).toggle('show');
            $('#c_reply_' + id.toString()).load('/Comment/GetInputBox' + "/" + id.toString(), function () {
                $(".c_input").summernote({
                    callbacks: {
                        onImageUpload: function (files) {
                            that = $(this);
                            sendFile(files[0], that);
                        }
                    },
                    focus: false,
                    placeholder: 'Write comment...',
                    disableDragAndDrop: true,
                    toolbar: [['style', ['style']], ['para', ['ul', 'ol', 'paragraph']], 'bold', 'italic', 'underline', 'strikethrough', 'fontsize', 'color', 'link'],
                    minHeight: 60,
                    maxHeight: 300,
                    hint: {
                        match: /\B@@(\w*)$/,
                        search: function (keyword, callback) {
                            if (!keyword.length) return callback();
                            var msg = JSON.stringify({ 'searchstr': keyword.toString() })
                            $.ajax({
                                async: true,
                                url: '/Comment/GetMentions',
                                type: 'POST',
                                contentType: "application/json; charset=utf-8",
                                dataType: 'json',
                                data: msg,
                                error: function () {
                                    callback();
                                },
                                success: function (res) {
                                    callback(res.users);
                                }
                            });
                        },
                        content: function (item) {
                            //return '@@' + item;
                            //return $('<span />').addClass('badge').addClass('userhint').html('@@' + item)[0];
                            return $("<span class='badge badge-info userhint'>").html('@@' + item)[0];
                        }
                    }
                });
                $(".note-statusbar").css("display", "none");
            });
        };
    </script>
    @Scripts.Render("~/bundles/shared")
</body>
</html>
