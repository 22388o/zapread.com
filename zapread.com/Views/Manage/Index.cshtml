@model zapread.com.Models.ManageUserViewModel
@{
    ViewBag.Title = "Manage";
    List<string> included = new List<string>();
}

@section Styles {
    @Styles.Render("~/Content/plugins/dropzone/dropZoneStyles")
    @Styles.Render("~/Content/plugins/chosen/chosenStyles")
}

@section Scripts {
    @Scripts.Render("~/plugins/dropZone")
    @Scripts.Render("~/plugins/moment")
    @Scripts.Render("~/plugins/chosen")

    <script type="text/javascript">
        var ub = @Model.UserBalance;
        var IsAuthenticated = "@Request.IsAuthenticated" == "True";

        $(document).ready(function () {

            $('.chosen-select').chosen({ width: "100%" }).on('change', function (evt, params) {
                var selectedValue = params.selected;
                var values = $('#languagesSelect').val();
                console.log(selectedValue);
                

                var userlangs = values.join(',');
                console.log(userlangs);

                $.ajax({
                    async: true,
                    data: JSON.stringify({ 'languages': userlangs }),
                    type: 'POST',
                    url: '/Manage/UpdateUserLanguages',
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (response) {
                        if (response.success) {
                            console.log('languages updated.');
                        }
                        else {
                            console.log(response.message);
                        }
                    }
                });
            });

            // Set group list as clickable
            $(".clickable-row").click(function () {
                window.location = $(this).data("href");
            });

            // This loads all partial views on page
            $(".partialContents").each(function (index, item) {
                var url = $(item).data("url");
                if (url && url.length > 0) {
                    $(item).load(url);
                }
            });

            // This formats the timestamps on the page
            $('.eventTime').each(function (i, e) {
                var time = moment.utc($(e).html()).local().calendar();
                var date = moment.utc($(e).html()).local().format("DD MMM YYYY");
                $(e).html('<span>' + time + ' - ' + date + '</span>');
            });

            // Collapse ibox function
            $('.collapse-link').on('click', function () {
                var ibox = $(this).closest('div.ibox');
                var button = $(this).find('i');
                var content = ibox.children('.ibox-content');
                content.slideToggle(200);
                button.toggleClass('fa-chevron-up').toggleClass('fa-chevron-down');
                ibox.toggleClass('').toggleClass('border-bottom');
                setTimeout(function () {
                    ibox.resize();
                    ibox.find('[id^=map-]').resize();
                }, 50);
            });
        });

        var updateLanguages = function () {
            console.log('updateLanguages');
        };

        var settingToggle = function (e) {
            //alert('Not implemented yet.');
            var setting = e.id;
            var value = e.checked;

            $.ajax({
                async: true,
                data: JSON.stringify({'setting':setting, 'value': value}),
                type: 'POST',
                url: '/Manage/UpdateUserSetting',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (response) {
                    if (response.Result == "Success") {
                        //alert('setting updated.');
                    }
                }
            });

            //e.checked ? alert(e.id + "active") : alert(e.id + "inactive");
        }

        var leave = function (id) {
            leaveurl = "/Group/LeaveGroup"
            var data = JSON.stringify({ 'gid': id });
            $.ajax({
                async: true,
                data: data.toString(),
                type: 'POST',
                url: leaveurl,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (response) {
                    if (response.result == "success") {
                        $("#j_" + id.toString()).html("<i class='fa fa-user-plus'></i> Rejoin ");
                        $("#j_" + id.toString()).attr("onClick", "javascript: join(" + id.toString() + "); ");
                        //alert('left!');
                    }
                }
            });
            return false; // Prevent jump to top of page
        }

        var join = function (id) {
            joinurl = "/Group/JoinGroup"
            var data = JSON.stringify({ 'gid': id });
            $.ajax({
                async: true,
                data: data.toString(),
                type: 'POST',
                url: joinurl,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (response) {
                    if (response.result == "success") {
                        $("#j_" + id.toString()).html("<i class='fa fa-user-times'></i> Leave ");
                        $("#j_" + id.toString()).attr("onClick", "javascript: leave(" + id.toString() + "); ");
                        //alert('joined!');
                    }
                }
            });
            return false; // Prevent jump to top of page
        }

        Dropzone.options.dropzoneForm = {
            paramName: "file", // The name that will be used to transfer the file
            maxFilesize: 15, // MB
            acceptedFiles: "image/*",
            maxFiles: 1,
            addRemoveLinks: true,
            init: function () {
                this.on("addedfile", function () {
                    if (this.files[1] != null) {
                        this.removeFile(this.files[0]);
                    }
                });
            },
            dictDefaultMessage: "<strong>Drop files here or click to upload. </strong>"
        };

        var BlockNumber = 10;  //Infinite Scroll starts from second block
        var NoMoreData = false;
        var inProgress = false;
        $(window).scroll(function () {
            if ($(window).scrollTop() == $(document).height() -
            $(window).height() && !NoMoreData && !inProgress) {
                loadmore();
            }
        });
        var loadmore = function () {
            if (!inProgress) {
                inProgress = true;
                $('#loadmore').show();
                $('#btnLoadmore').prop('disabled', true);
                $.post("@Url.Action("InfiniteScroll", "Manage")",
                    { "BlockNumber": BlockNumber },
                    function (data) {
                        $('#loadmore').hide();
                        $('#btnLoadmore').prop('disabled', false);
                        BlockNumber = BlockNumber + 10;
                        NoMoreData = data.NoMoreData;
                        $("#posts").append(data.HTMLString);
                        inProgress = false;
                        $('.postTime').each(function (i, e) {
                            var time = moment.utc($(e).html()).local().calendar();
                            var date = moment.utc($(e).html()).local().format("DD MMM YYYY");
                            $(e).html('<span>' + time + ' - ' + date + '</span>');
                            $(e).css('display', 'inline');
                            $(e).removeClass("postTime");
                        });
                        if (NoMoreData) {
                            $('#showmore').hide();
                        }
                        $(".sharing").each(function () {
                            $(this).jsSocials({
                                url: $(this).data('url'),
                                text: $(this).data('sharetext'),
                                showLabel: false,
                                showCount: false,
                                shareIn: "popup",
                                shares: ["email", "twitter", "facebook", "googleplus", "linkedin", "pinterest", "whatsapp"]
                            });
                            $(this).removeClass("sharing");
                        });
                        $('.read-more').readMore({
                            readMoreLinkClass: "read-more__link",
                            readMoreText: "Read more",
                            readLessText: "Read less",
                            readMoreHeight: 800
                        });
                        $(".c_input").summernote({
                            callbacks: {
                                onImageUpload: function (files) {
                                    that = $(this);
                                    sendFile(files[0], that);
                                }
                            },
                            focus: false,
                            placeholder: 'Write comment...',
                            disableDragAndDrop: true,
                            toolbar: ['bold', 'italic', 'underline', 'strikethrough', 'fontsize', 'color', 'link'],
                            minHeight: 60,
                            maxHeight: 300,
                            hint: {
                                match: /\B@@(\w*)$/,
                                search: function (keyword, callback) {
                                    callback($.grep(usermentions, function (item) {
                                        return item.indexOf(keyword) == 0;
                                    }));
                                },
                                content: function (item) {
                                    return $("<span class='badge badge-info userhint'>").html('@@' + item)[0];
                                }
                            }
                        });
                        $('.c_input').each(function (i, e) {
                            $(e).removeClass("c_input");
                        });

                        $(".note-statusbar").css("display", "none");
                    });
            }
        };
    </script>

}

@Html.Partial(partialViewName: "_PartialModalVote")         @*This is the code for the modal dialog box to vote*@

@Html.Partial(partialViewName: "_PartialModalUpdateUserAlias")         @*This is the code for the modal dialog box to vote*@


<div class="modal inmodal" id="myModal" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog">
        @Html.Partial(partialViewName: "_ModalAboutMe", model: @Model.AboutMe)
    </div>
</div>

<div class="modal inmodal" id="ModalProfileImage" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-header">
            <h5 class="modal-title">Update Profile Image</h5>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Update Profile Image</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @using (Html.BeginForm("UpdateProfileImage", "Manage", FormMethod.Post, new { @class = "dropzone", id = "dropzoneForm", role = "form" }))
                {
                    @Html.AntiForgeryToken()
                    <div class="fallback">
                        <input name="file" type="file" />
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-dismiss="modal">Done</button>
            </div>
        </div>
    </div>
</div>

<div class="wrapper wrapper-content">
    <div class="row animated fadeInRight">
        <div class="col-md-4">
            <div class="ibox float-e-margins">
                <div class="ibox-title">
                    <h5>Profile Detail</h5>
                    <div class="ibox-tools">
                        <a class="dropdown-toggle" data-toggle="dropdown" href="#">
                            <i class="fa fa-wrench"></i>
                        </a>
                        <ul class="dropdown-menu dropdown-user">
                            <li>
                                <a href="#" data-toggle="modal" data-target="#ModalProfileImage">Update Profile Image</a>
                            </li>
                        </ul>
                    </div>
                </div>
                <div>
                    <div class="ibox-content no-padding border-left-right">
                        <div class="cuadro_intro_hover">
                            <p style="text-align:center; ">
                                <img class="img-fluid" src="@Url.Action("UserImage", "Home", new {size = 500})" />
                            </p>
                            <div class="caption">
                                <div class="blur"></div>
                                <div class="caption-text">
                                    <br />
                                    <a href="#" class="btn btn-sm btn-primary" data-toggle="modal" data-target="#ModalProfileImage">Update Profile Image</a>
                                </div>
                            </div>
                        </div>
                        @*<img class="img-fluid" src="@Url.Action("UserImage", "Home", new {size = 500})" />*@
                    </div>
                    <div class="ibox-content profile-content">
                        <h4>
                            <strong>
                                @if (Request.IsAuthenticated)
                                {
                                    <img class="img-circle" src="@Url.Action("UserImage", "Home", new {size = 30})" /> @User.Identity.Name
                                }
                                else
                                {
                                    <text>User Name</text>
                                }
                            </strong>
                            <a class="dropdown-toggle" data-toggle="dropdown" href="#" style="color:#c3c3c3;">
                                <i class="fa fa-cog"></i>
                            </a>
                            <ul class="dropdown-menu dropdown-user">
                                <li>
                                    <a href="#" data-toggle="modal" data-target="#ModalProfileImage">Update Profile Image</a>
                                </li>
                                <li>
                                    <a href="#" data-toggle="modal" data-target="#userAliasModal">Change Alias</a>
                                </li>
                            </ul>
                        </h4>

                        <p><i class="fa fa-star"></i> Reputation @Model.User.Reputation</p>
                        <h5>
                            About me
                            <a class="dropdown-toggle" data-toggle="dropdown" href="#" style="color:#c3c3c3;">
                                <i class="fa fa-cog"></i>
                            </a>
                            <ul class="dropdown-menu dropdown-user">
                                <li>
                                    <a href="#" data-toggle="modal" data-target="#myModal">Update Description</a>
                                </li>
                            </ul>
                        </h5>
                        <p>
                            @Model.AboutMe.AboutMe
                        </p>
                        <div class="row m-t-lg">
                            <div class="col-md-4">

                                <h5><strong>@Model.NumPosts</strong> Posts</h5>
                            </div>
                            <div class="col-md-4">

                                <h5><strong>@Model.NumFollowing</strong> Following</h5>
                            </div>
                            <div class="col-md-4">

                                <h5><strong>@Model.NumFollowers</strong> Followers</h5>
                            </div>
                        </div>
                        <div class="user-button">

                        </div>
                    </div>
                    <div class="ibox-title">
                        <h5>Settings</h5>
                    </div>
                    <div>
                        <div class="ibox-content profile-content">
                            <h4>Notifications</h4>
                            <div class="row">
                                <div class="col-auto">
                                    Email
                                </div>
                                <div class="col-auto">
                                    Alert
                                </div>
                                <div class="col">
                                    &nbsp;
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-auto">
                                    <div class="switch">
                                        <div class="onoffswitch">
                                            <input type="checkbox" @if (Model.Settings.NotifyOnOwnPostCommented) { <text> checked</text> } class="onoffswitch-checkbox" id="notifyPost" onclick="settingToggle(this)">
                                            <label class="onoffswitch-label" for="notifyPost">
                                                <span class="onoffswitch-inner"></span>
                                                <span class="onoffswitch-switch"></span>
                                            </label>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-auto">
                                    <div class="switch">
                                        <div class="onoffswitch">
                                            <input type="checkbox" @if (Model.Settings.AlertOnOwnPostCommented) { <text> checked</text> } class="onoffswitch-checkbox" id="alertPost" onclick="settingToggle(this)">
                                            <label class="onoffswitch-label" for="alertPost">
                                                <span class="onoffswitch-inner"></span>
                                                <span class="onoffswitch-switch"></span>
                                            </label>
                                        </div>
                                    </div>
                                </div>
                                <div class="col">
                                    Your posts receive a comment.
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-auto">
                                    <div class="switch">
                                        <div class="onoffswitch">
                                            <input type="checkbox" @if (Model.Settings.NotifyOnOwnCommentReplied) { <text> checked</text> } class="onoffswitch-checkbox" id="notifyComment" onclick="settingToggle(this)">
                                            <label class="onoffswitch-label" for="notifyComment">
                                                <span class="onoffswitch-inner"></span>
                                                <span class="onoffswitch-switch"></span>
                                            </label>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-auto">
                                    <div class="switch">
                                        <div class="onoffswitch">
                                            <input type="checkbox" @if (Model.Settings.AlertOnOwnCommentReplied) { <text> checked</text> } class="onoffswitch-checkbox" id="alertComment" onclick="settingToggle(this)">
                                            <label class="onoffswitch-label" for="alertComment">
                                                <span class="onoffswitch-inner"></span>
                                                <span class="onoffswitch-switch"></span>
                                            </label>
                                        </div>
                                    </div>
                                </div>
                                <div class="col">
                                    Your comments receive a reply.
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-auto">
                                    <div class="switch">
                                        <div class="onoffswitch">
                                            <input type="checkbox" @if (Model.Settings.NotifyOnNewPostSubscribedGroup) { <text> checked</text> } class="onoffswitch-checkbox" id="notifyNewPostGroup" onclick="settingToggle(this)">
                                            <label class="onoffswitch-label" for="notifyNewPostGroup">
                                                <span class="onoffswitch-inner"></span>
                                                <span class="onoffswitch-switch"></span>
                                            </label>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-auto">
                                    <div class="switch">
                                        <div class="onoffswitch">
                                            <input type="checkbox" @if (Model.Settings.AlertOnNewPostSubscribedGroup) { <text> checked</text> } class="onoffswitch-checkbox" id="alertNewPostGroup" onclick="settingToggle(this)">
                                            <label class="onoffswitch-label" for="alertNewPostGroup">
                                                <span class="onoffswitch-inner"></span>
                                                <span class="onoffswitch-switch"></span>
                                            </label>
                                        </div>
                                    </div>
                                </div>
                                <div class="col">
                                    New post in a subscribed group.
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-auto">
                                    <div class="switch">
                                        <div class="onoffswitch">
                                            <input type="checkbox" @if (Model.Settings.NotifyOnNewPostSubscribedUser) { <text> checked</text> } class="onoffswitch-checkbox" id="notifyNewPostUser" onclick="settingToggle(this)">
                                            <label class="onoffswitch-label" for="notifyNewPostUser">
                                                <span class="onoffswitch-inner"></span>
                                                <span class="onoffswitch-switch"></span>
                                            </label>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-auto">
                                    <div class="switch">
                                        <div class="onoffswitch">
                                            <input type="checkbox" @if (Model.Settings.AlertOnNewPostSubscribedUser) { <text> checked</text> } class="onoffswitch-checkbox" id="alertNewPostUser" onclick="settingToggle(this)">
                                            <label class="onoffswitch-label" for="alertNewPostUser">
                                                <span class="onoffswitch-inner"></span>
                                                <span class="onoffswitch-switch"></span>
                                            </label>
                                        </div>
                                    </div>
                                </div>
                                <div class="col">
                                    New post from a subscribed user.
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-auto">
                                    <div class="switch">
                                        <div class="onoffswitch">
                                            <input type="checkbox" @if (Model.Settings.NotifyOnPrivateMessage) { <text> checked</text> } class="onoffswitch-checkbox" id="notifyPrivateMessage" onclick="settingToggle(this)">
                                            <label class="onoffswitch-label" for="notifyPrivateMessage">
                                                <span class="onoffswitch-inner"></span>
                                                <span class="onoffswitch-switch"></span>
                                            </label>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-auto">
                                    <div class="switch">
                                        <div class="onoffswitch">
                                            <input type="checkbox" @if (Model.Settings.AlertOnPrivateMessage) { <text> checked</text> } class="onoffswitch-checkbox" id="alertPrivateMessage" onclick="settingToggle(this)">
                                            <label class="onoffswitch-label" for="alertPrivateMessage">
                                                <span class="onoffswitch-inner"></span>
                                                <span class="onoffswitch-switch"></span>
                                            </label>
                                        </div>
                                    </div>
                                </div>
                                <div class="col">
                                    New Private Message
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-auto">
                                    <div class="switch">
                                        <div class="onoffswitch">
                                            <input type="checkbox" @if (Model.Settings.NotifyOnReceivedTip) { <text> checked</text> } class="onoffswitch-checkbox" id="notifyReceivedTip" onclick="settingToggle(this)">
                                            <label class="onoffswitch-label" for="notifyReceivedTip">
                                                <span class="onoffswitch-inner"></span>
                                                <span class="onoffswitch-switch"></span>
                                            </label>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-auto">
                                    <div class="switch">
                                        <div class="onoffswitch">
                                            <input type="checkbox" @if (Model.Settings.AlertOnReceivedTip) { <text> checked</text> } class="onoffswitch-checkbox" id="alertOnReceivedTip" onclick="settingToggle(this)">
                                            <label class="onoffswitch-label" for="alertOnReceivedTip">
                                                <span class="onoffswitch-inner"></span>
                                                <span class="onoffswitch-switch"></span>
                                            </label>
                                        </div>
                                    </div>
                                </div>
                                <div class="col">
                                    Received tip.
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-auto">
                                    <div class="switch">
                                        <div class="onoffswitch">
                                            <input type="checkbox" @if (Model.Settings.NotifyOnMentioned) { <text> checked</text> } class="onoffswitch-checkbox" id="notifyMentioned" onclick="settingToggle(this)">
                                            <label class="onoffswitch-label" for="notifyMentioned">
                                                <span class="onoffswitch-inner"></span>
                                                <span class="onoffswitch-switch"></span>
                                            </label>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-auto">
                                    <div class="switch">
                                        <div class="onoffswitch">
                                            <input type="checkbox" @if (Model.Settings.AlertOnMentioned) { <text> checked</text> } class="onoffswitch-checkbox" id="alertOnMentioned" onclick="settingToggle(this)">
                                            <label class="onoffswitch-label" for="alertOnMentioned">
                                                <span class="onoffswitch-inner"></span>
                                                <span class="onoffswitch-switch"></span>
                                            </label>
                                        </div>
                                    </div>
                                </div>
                                <div class="col">
                                    Mentioned by others.
                                </div>
                            </div>
                        </div>
                    </div>
                    @*<div>
                        <div class="ibox-content profile-content">
                            <h4>Receive Alerts</h4>
                            <div class="row">
                                <div class="col-auto">
                                    <div class="switch">
                                        <div class="onoffswitch">
                                            <input type="checkbox" @if (Model.Settings.AlertOnOwnPostCommented) { <text> checked</text> } class="onoffswitch-checkbox" id="alertComment" onclick="settingToggle(this)">
                                            <label class="onoffswitch-label" for="alertComment">
                                                <span class="onoffswitch-inner"></span>
                                                <span class="onoffswitch-switch"></span>
                                            </label>
                                        </div>
                                    </div>
                                </div>
                                <div class="col">
                                    Your posts receive a comment.
                                </div>
                            </div>
                        </div>
                    </div>*@
                    <div>
                        <div class="ibox-content profile-content">
                            <h4>Customization</h4>
                            <div class="row">
                                <div class="col-auto">
                                    <div class="switch">
                                        <div class="onoffswitch">
                                            <input type="checkbox" @if (Model.Settings.ColorTheme == "dark") { <text> checked</text> } class="onoffswitch-checkbox" id="colorTheme" onclick="settingToggle(this)">
                                            <label class="onoffswitch-label" for="colorTheme">
                                                <span class="onoffswitch-inner"></span>
                                                <span class="onoffswitch-switch"></span>
                                            </label>
                                        </div>
                                    </div>
                                </div>
                                <div class="col">
                                    [experimental] Use dark color theme.  Refresh page to take effect.
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-auto">
                                    <div class="switch">
                                        <div class="onoffswitch">
                                            <input type="checkbox" @if (Model.Settings.ViewAllLanguages) { <text> checked</text> } class="onoffswitch-checkbox" id="ViewAllLanguages" onclick="settingToggle(this)">
                                            <label class="onoffswitch-label" for="ViewAllLanguages">
                                                <span class="onoffswitch-inner"></span>
                                                <span class="onoffswitch-switch"></span>
                                            </label>
                                        </div>
                                    </div>
                                </div>
                                <div class="col">
                                    View posts in all languages.
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-auto">
                                    <div class="switch">
                                        <div class="onoffswitch">
                                            <input type="checkbox" @if (Model.Settings.ViewTranslatedLanguages) { <text> checked</text> } class="onoffswitch-checkbox" id="ViewTranslatedLanguages" onclick="settingToggle(this)">
                                            <label class="onoffswitch-label" for="ViewTranslatedLanguages">
                                                <span class="onoffswitch-inner"></span>
                                                <span class="onoffswitch-switch"></span>
                                            </label>
                                        </div>
                                    </div>
                                </div>
                                <div class="col">
                                    [experimental] View google translated posts automatically if they exist.
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-lg-12">
                                    <div>
                                        <br />
                                        <h4>User Languages</h4>
                                        <select id='languagesSelect' data-placeholder="Choose a Language..." class="chosen-select" multiple @*onchange="updateLanguages()"*@>
                                            @foreach (var l in Model.KnownLanguages)
                                            {
                                                if (!included.Contains(@l.Split(':')[0]) && Model.Languages.Contains(@l.Split(':')[0]))
                                                {
                                                    <option selected value="@l.Split(':')[0]">@l.Split(':')[1]</option>
                                                    included.Add(@l.Split(':')[0]);
                                                }
                                                else
                                                {
                                                    <option value="@l.Split(':')[0]">@l.Split(':')[1]</option>
                                                }
                                            }
                                        </select>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="ibox">
                    <div class="ibox-content">
                        <h3>Top Subscribed</h3>
                        <p class="small">
                            You are subscribed to content from these users.  Their content will appear in your activity feed.
                        </p>
                        <div class="user-friends">
                            @foreach (var u in Model.TopFollowing)
                            {
                                <a href="@Url.Action(actionName: "Index", controllerName: "User", routeValues: new { username = u.Name })">
                                    <img class="img-circle" title="@u.Name" src="@Url.Action("UserImage", "Home", new {size = 30, UserId = u.AppId})" />
                                </a>
                            }
                        </div>
                    </div>
                </div>

                <div class="ibox">
                    <div class="ibox-content">
                        <h3>Top Subscribing</h3>
                        <p class="small">
                            These users are subscribing to you.  Your content will appear in their activity feed.
                        </p>
                        <div class="user-friends">
                            @foreach (var u in Model.TopFollowers)
                            {
                                <a href="@Url.Action(actionName: "Index", controllerName: "User", routeValues: new { username = u.Name })">
                                    <img class="img-circle" title="@u.Name" src="@Url.Action("UserImage", "Home", new {size = 30, UserId = u.AppId})" />
                                </a>
                            }
                        </div>
                    </div>
                </div>
                <div class="ibox-title">
                    <div class="row">
                        <div class="col-md-5">
                            <a href="@Url.Action("Financial", "Manage")" class="btn btn-primary btn-outline">Account Financial</a>
                        </div>
                    </div>
                    <div class="ibox-tools">
                    </div>
                </div>
                <div>
                    <div class="ibox-content profile-content">
                        <div class="partialContents" data-url="/Account/Balance"></div>
                        <br />
                        <b>Recent Lightning Transactions</b>
                        @Html.Partial(partialViewName: "_PartialFinance", model: @Model.Financial)
                    </div>
                </div>

                <div class="ibox-title">
                    <h5>Groups</h5>
                    <div class="ibox-tools">
                    </div>
                </div>
                <div>
                    <div class="ibox-content profile-content">
                        @Html.Partial(partialViewName: "_PartialManageGroups", model: @Model.UserGroups)
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-8">
            <div class="ibox float-e-margins">
                <div class="ibox-title">
                    <h5>Activites</h5>
                    <div class="ibox-tools">
                        <a tabindex="-1" class="collapse-link">
                            <i class="fa fa-chevron-up"></i>
                        </a>
                    </div>
                </div>
                <div class="ibox-content">
                    <div id="posts">
                        @foreach (var p in Model.ActivityPosts)
                        {
                            @Html.Partial(partialViewName: "_PartialPostRender", model: p)
                        }
                    </div>
                    <div>
                        <button id="btnLoadmore" class="btn btn-primary btn-block m" onclick="loadmore()"><i class="fa fa-arrow-down"></i> Show More <span id="loadmore" class="loading open-circle" style="display:none"></span></button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<p class="text-success">@ViewBag.StatusMessage</p>
<div>
    <h4>Change your account settings</h4>
    <hr />
    <dl class="dl-horizontal">
        <dt>Password:</dt>
        <dd>
            [
            @if (Model.HasPassword)
            {
                @Html.ActionLink("Change your password", "ChangePassword")
            }
            else
            {
                @Html.ActionLink("Create", "SetPassword")
            }
            ]
        </dd>
        <dt>External Logins:</dt>
        <dd>
            @Model.Logins.Count [
            @Html.ActionLink("Manage", "ManageLogins") ]
        </dd>
    </dl>
</div>